import tkinter as tk
from tkinter import messagebox
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from datetime import datetime
from preguntas import preguntas

class AutoevaluacionMC(tk.Tk):
    def __init__(self, preguntas, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.title("Autoevaluación Multiple Choice")
        self.geometry("400x350")

        self.preguntas = preguntas
        self.respuestas_correctas = [pregunta['respuesta_correcta'] for pregunta in preguntas]

        self.pregunta_actual = 0
        self.respuestas_usuario = []

        self.respuesta_seleccionada = tk.StringVar()

        self.crear_interfaz()

        self.tiempo_restante = 1600
        self.actualizar_tiempo()

    def crear_interfaz(self):
        # Campo para ingresar nombre y apellido
        self.nombre_apellido_label = tk.Label(self, text="Nombre y Apellido:")
        self.nombre_apellido_label.pack(pady=10)

        self.nombre_apellido_entry = tk.Entry(self)
        self.nombre_apellido_entry.pack(pady=5)

        # Botón para iniciar examen
        self.boton_iniciar = tk.Button(self, text="Iniciar Examen", command=self.iniciar_examen)
        self.boton_iniciar.pack(pady=5)

        # Etiqueta para la pregunta
        self.pregunta_texto = tk.Label(self, text="", wraplength=380)
        self.pregunta_texto.pack(pady=10)

        # Frame para opciones
        self.opciones_frame = tk.Frame(self)
        self.opciones_frame.pack(pady=10)

        # Opciones (radiobuttons)
        self.opcion_a = tk.Radiobutton(self.opciones_frame, text="", variable=self.respuesta_seleccionada, value="A")
        self.opcion_a.pack(anchor="w")
        self.opcion_b = tk.Radiobutton(self.opciones_frame, text="", variable=self.respuesta_seleccionada, value="B")
        self.opcion_b.pack(anchor="w")
        self.opcion_c = tk.Radiobutton(self.opciones_frame, text="", variable=self.respuesta_seleccionada, value="C")
        self.opcion_c.pack(anchor="w")
        self.opcion_d = tk.Radiobutton(self.opciones_frame, text="", variable=self.respuesta_seleccionada, value="D")
        self.opcion_d.pack(anchor="w")

        # Botón para siguiente pregunta
        self.boton_siguiente = tk.Button(self, text="Siguiente", command=self.siguiente_pregunta)
        self.boton_siguiente.pack(pady=10)

        # Label para el tiempo restante
        self.tiempo_label = tk.Label(self, text="Tiempo restante: ")
        self.tiempo_label.pack()

        self.actualizar_pregunta()

    def iniciar_examen(self):
        # Obtener el nombre y apellido del usuario
        nombre_apellido = self.nombre_apellido_entry.get()
        if nombre_apellido.strip() == "":
            messagebox.showerror("Error", "Por favor ingresa tu nombre y apellido.")
        else:
            self.nombre_apellido = nombre_apellido
            self.nombre_apellido_label.config(text=f"Nombre y Apellido: {nombre_apellido}")
            self.nombre_apellido_entry.config(state="disabled")
            self.boton_iniciar.config(state="disabled")
            self.actualizar_tiempo()

    def siguiente_pregunta(self):
        if self.respuesta_seleccionada.get() is not None:
            self.respuestas_usuario.append(self.respuesta_seleccionada.get())
            self.pregunta_actual += 1
            self.actualizar_pregunta()
        else:
            messagebox.showerror("Error", "Por favor selecciona una respuesta.")

    def actualizar_pregunta(self):
        if self.pregunta_actual < len(self.preguntas):
            pregunta = self.preguntas[self.pregunta_actual]
            self.pregunta_texto.config(text=pregunta['texto'])
            opciones = pregunta['opciones']
            self.opcion_a.config(text=opciones[0])
            self.opcion_b.config(text=opciones[1])
            self.opcion_c.config(text=opciones[2])
            self.opcion_d.config(text=opciones[3])
            self.respuesta_seleccionada.set(None)
        else:
            self.finalizar_autoevaluacion()

    def actualizar_tiempo(self):
        tiempo_horas = self.tiempo_restante // 3600
        tiempo_minutos = (self.tiempo_restante % 3600) // 60
        tiempo_segundos = self.tiempo_restante % 60

        tiempo_formateado = f"{tiempo_horas:02}:{tiempo_minutos:02}:{tiempo_segundos:02}"
        self.tiempo_label.config(text=f"Tiempo restante: {tiempo_formateado}")

        if self.tiempo_restante > 0:
            self.tiempo_restante -= 1
            self.after(1000, self.actualizar_tiempo)
        else:
            self.finalizar_autoevaluacion()

    def finalizar_autoevaluacion(self):
        self.boton_siguiente.config(state="disabled")
        correctas = sum(1 for respuesta, correcta in zip(self.respuestas_usuario, self.respuestas_correctas) if respuesta == correcta)
        total_preguntas = len(self.preguntas)
        porcentaje_correctas = (correctas / total_preguntas) * 100

        resultado_texto = f"Porcentaje de respuestas correctas: {porcentaje_correctas:.2f}%\n\n"
        resultado_texto += "Respuestas:\n"
        for i, (pregunta, respuesta_correcta, respuesta_usuario) in enumerate(zip(self.preguntas, self.respuestas_correctas, self.respuestas_usuario)):
            resultado_texto += f"{i+1}. {pregunta['texto']}\n"
            resultado_texto += f"   Tu respuesta: {pregunta['opciones'][ord(respuesta_usuario) - 65]}\n"
            resultado_texto += f"   Respuesta correcta: {pregunta['opciones'][ord(respuesta_correcta) - 65]}\n\n"

        self.mostrar_resultado(resultado_texto)

    def mostrar_resultado(self, resultado_texto):
        ventana_resultado = tk.Toplevel(self)
        ventana_resultado.title("Resultado")

        # Obtener tiempo en que se realizó el examen
        tiempo_examen = datetime.now().strftime("%H:%M:%S")

        # Obtener fecha en que se realizó el examen
        fecha_examen = datetime.now().strftime("%Y-%m-%d")

        # Construir el texto con la información adicional
        informacion_adicional = f"Nombre: {self.nombre_apellido}\nTiempo de examen: {tiempo_examen}\nFecha de examen: {fecha_examen}\n\n"
        resultado_texto_con_info = informacion_adicional + resultado_texto

        # Crear un widget Text para mostrar el resultado
        text_resultado = tk.Text(ventana_resultado, wrap="word")
        text_resultado.pack(expand=True, fill="both")

        # Agregar el texto al widget Text
        text_resultado.insert(tk.END, resultado_texto_con_info)

        # Crear una barra de desplazamiento
        scrollbar = tk.Scrollbar(ventana_resultado, command=text_resultado.yview)
        scrollbar.pack(side="right", fill="y")

        # Conectar la barra de desplazamiento al widget Text
        text_resultado.config(yscrollcommand=scrollbar.set)

        boton_guardar_pdf = tk.Button(ventana_resultado, text="Guardar como PDF", command=lambda: self.guardar_pdf(resultado_texto_con_info))
        boton_guardar_pdf.pack(pady=10)

    def guardar_pdf(self, contenido):
        c = canvas.Canvas("Autoevaluacion.pdf", pagesize=letter)
        y = 750
        for linea in contenido.split('\n'):
            c.drawString(100, y, linea)
            y -= 15  # Ajustar el espaciado entre líneas
        c.save()
        messagebox.showinfo("Guardado", "El archivo se ha guardado como Autoevaluacion.pdf")




app = AutoevaluacionMC(preguntas)
app.mainloop()
