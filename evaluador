{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlbertoGramberg/Evaluador/blob/main/evaluador\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mZ1FfJcob9fG"
      },
      "outputs": [],
      "source": [
        "import tkinter as tk\n",
        "from tkinter import messagebox\n",
        "from reportlab.lib.pagesizes import letter\n",
        "from reportlab.pdfgen import canvas\n",
        "from datetime import datetime\n",
        "from preguntas import preguntas\n",
        "\n",
        "\n",
        "class AutoevaluacionMC(tk.Tk):\n",
        "    def __init__(self, preguntas, *args, **kwargs):\n",
        "        super().__init__(*args, **kwargs)\n",
        "        self.title(\"Autoevaluación Multiple Choice\")\n",
        "        self.geometry(\"400x350\")\n",
        "\n",
        "        self.preguntas = preguntas\n",
        "        self.respuestas_correctas = [pregunta['respuesta_correcta'] for pregunta in preguntas]\n",
        "\n",
        "        self.pregunta_actual = 0\n",
        "        self.respuestas_usuario = []\n",
        "\n",
        "        self.respuesta_seleccionada = tk.StringVar()\n",
        "\n",
        "        self.crear_interfaz()\n",
        "\n",
        "        self.tiempo_restante = 1600\n",
        "        self.actualizar_tiempo()\n",
        "\n",
        "    def crear_interfaz(self):\n",
        "        # Campo para ingresar nombre y apellido\n",
        "        self.nombre_apellido_label = tk.Label(self, text=\"Nombre y Apellido:\")\n",
        "        self.nombre_apellido_label.pack(pady=10)\n",
        "\n",
        "        self.nombre_apellido_entry = tk.Entry(self)\n",
        "        self.nombre_apellido_entry.pack(pady=5)\n",
        "\n",
        "        # Botón para iniciar examen\n",
        "        self.boton_iniciar = tk.Button(self, text=\"Iniciar Examen\", command=self.iniciar_examen)\n",
        "        self.boton_iniciar.pack(pady=5)\n",
        "\n",
        "        # Etiqueta para la pregunta\n",
        "        self.pregunta_texto = tk.Label(self, text=\"\", wraplength=380)\n",
        "        self.pregunta_texto.pack(pady=10)\n",
        "\n",
        "        # Frame para opciones\n",
        "        self.opciones_frame = tk.Frame(self)\n",
        "        self.opciones_frame.pack(pady=10)\n",
        "\n",
        "        # Opciones (radiobuttons)\n",
        "        self.opcion_a = tk.Radiobutton(self.opciones_frame, text=\"\", variable=self.respuesta_seleccionada, value=\"A\")\n",
        "        self.opcion_a.pack(anchor=\"w\")\n",
        "        self.opcion_b = tk.Radiobutton(self.opciones_frame, text=\"\", variable=self.respuesta_seleccionada, value=\"B\")\n",
        "        self.opcion_b.pack(anchor=\"w\")\n",
        "        self.opcion_c = tk.Radiobutton(self.opciones_frame, text=\"\", variable=self.respuesta_seleccionada, value=\"C\")\n",
        "        self.opcion_c.pack(anchor=\"w\")\n",
        "        self.opcion_d = tk.Radiobutton(self.opciones_frame, text=\"\", variable=self.respuesta_seleccionada, value=\"D\")\n",
        "        self.opcion_d.pack(anchor=\"w\")\n",
        "\n",
        "        # Botón para siguiente pregunta\n",
        "        self.boton_siguiente = tk.Button(self, text=\"Siguiente\", command=self.siguiente_pregunta)\n",
        "        self.boton_siguiente.pack(pady=10)\n",
        "\n",
        "        # Label para el tiempo restante\n",
        "        self.tiempo_label = tk.Label(self, text=\"Tiempo restante: \")\n",
        "        self.tiempo_label.pack()\n",
        "\n",
        "        self.actualizar_pregunta()\n",
        "\n",
        "    def iniciar_examen(self):\n",
        "        # Obtener el nombre y apellido del usuario\n",
        "        nombre_apellido = self.nombre_apellido_entry.get()\n",
        "        if nombre_apellido.strip() == \"\":\n",
        "            messagebox.showerror(\"Error\", \"Por favor ingresa tu nombre y apellido.\")\n",
        "        else:\n",
        "            self.nombre_apellido = nombre_apellido\n",
        "            self.nombre_apellido_label.config(text=f\"Nombre y Apellido: {nombre_apellido}\")\n",
        "            self.nombre_apellido_entry.config(state=\"disabled\")\n",
        "            self.boton_iniciar.config(state=\"disabled\")\n",
        "            self.actualizar_tiempo()\n",
        "\n",
        "    def siguiente_pregunta(self):\n",
        "        if self.respuesta_seleccionada.get() is not None:\n",
        "            self.respuestas_usuario.append(self.respuesta_seleccionada.get())\n",
        "            self.pregunta_actual += 1\n",
        "            self.actualizar_pregunta()\n",
        "        else:\n",
        "            messagebox.showerror(\"Error\", \"Por favor selecciona una respuesta.\")\n",
        "\n",
        "    def actualizar_pregunta(self):\n",
        "        if self.pregunta_actual < len(self.preguntas):\n",
        "            pregunta = self.preguntas[self.pregunta_actual]\n",
        "            self.pregunta_texto.config(text=pregunta['texto'])\n",
        "            opciones = pregunta['opciones']\n",
        "            self.opcion_a.config(text=opciones[0])\n",
        "            self.opcion_b.config(text=opciones[1])\n",
        "            self.opcion_c.config(text=opciones[2])\n",
        "            self.opcion_d.config(text=opciones[3])\n",
        "            self.respuesta_seleccionada.set(None)\n",
        "        else:\n",
        "            self.finalizar_autoevaluacion()\n",
        "\n",
        "    def actualizar_tiempo(self):\n",
        "        tiempo_horas = self.tiempo_restante // 3600\n",
        "        tiempo_minutos = (self.tiempo_restante % 3600) // 60\n",
        "        tiempo_segundos = self.tiempo_restante % 60\n",
        "\n",
        "        tiempo_formateado = f\"{tiempo_horas:02}:{tiempo_minutos:02}:{tiempo_segundos:02}\"\n",
        "        self.tiempo_label.config(text=f\"Tiempo restante: {tiempo_formateado}\")\n",
        "\n",
        "        if self.tiempo_restante > 0:\n",
        "            self.tiempo_restante -= 1\n",
        "            self.after(1000, self.actualizar_tiempo)\n",
        "        else:\n",
        "            self.finalizar_autoevaluacion()\n",
        "\n",
        "    def finalizar_autoevaluacion(self):\n",
        "        self.boton_siguiente.config(state=\"disabled\")\n",
        "        correctas = sum(1 for respuesta, correcta in zip(self.respuestas_usuario, self.respuestas_correctas) if respuesta == correcta)\n",
        "        total_preguntas = len(self.preguntas)\n",
        "        porcentaje_correctas = (correctas / total_preguntas) * 100\n",
        "\n",
        "        resultado_texto = f\"Porcentaje de respuestas correctas: {porcentaje_correctas:.2f}%\\n\\n\"\n",
        "        resultado_texto += \"Respuestas:\\n\"\n",
        "        for i, (pregunta, respuesta_correcta, respuesta_usuario) in enumerate(zip(self.preguntas, self.respuestas_correctas, self.respuestas_usuario)):\n",
        "            resultado_texto += f\"{i+1}. {pregunta['texto']}\\n\"\n",
        "            resultado_texto += f\"   Tu respuesta: {pregunta['opciones'][ord(respuesta_usuario) - 65]}\\n\"\n",
        "            resultado_texto += f\"   Respuesta correcta: {pregunta['opciones'][ord(respuesta_correcta) - 65]}\\n\\n\"\n",
        "\n",
        "        self.mostrar_resultado(resultado_texto)\n",
        "\n",
        "    def mostrar_resultado(self, resultado_texto):\n",
        "        ventana_resultado = tk.Toplevel(self)\n",
        "        ventana_resultado.title(\"Resultado\")\n",
        "\n",
        "        # Obtener tiempo en que se realizó el examen\n",
        "        tiempo_examen = datetime.now().strftime(\"%H:%M:%S\")\n",
        "\n",
        "        # Obtener fecha en que se realizó el examen\n",
        "        fecha_examen = datetime.now().strftime(\"%Y-%m-%d\")\n",
        "\n",
        "        # Construir el texto con la información adicional\n",
        "        informacion_adicional = f\"Nombre: {self.nombre_apellido}\\nTiempo de examen: {tiempo_examen}\\nFecha de examen: {fecha_examen}\\n\\n\"\n",
        "        resultado_texto_con_info = informacion_adicional + resultado_texto\n",
        "\n",
        "        # Crear un widget Text para mostrar el resultado\n",
        "        text_resultado = tk.Text(ventana_resultado, wrap=\"word\")\n",
        "        text_resultado.pack(expand=True, fill=\"both\")\n",
        "\n",
        "        # Agregar el texto al widget Text\n",
        "        text_resultado.insert(tk.END, resultado_texto_con_info)\n",
        "\n",
        "        # Crear una barra de desplazamiento\n",
        "        scrollbar = tk.Scrollbar(ventana_resultado, command=text_resultado.yview)\n",
        "        scrollbar.pack(side=\"right\", fill=\"y\")\n",
        "\n",
        "        # Conectar la barra de desplazamiento al widget Text\n",
        "        text_resultado.config(yscrollcommand=scrollbar.set)\n",
        "\n",
        "        boton_guardar_pdf = tk.Button(ventana_resultado, text=\"Guardar como PDF\", command=lambda: self.guardar_pdf(resultado_texto_con_info))\n",
        "        boton_guardar_pdf.pack(pady=10)\n",
        "\n",
        "    def guardar_pdf(self, contenido):\n",
        "        c = canvas.Canvas(\"Autoevaluacion.pdf\", pagesize=letter)\n",
        "        y = 750\n",
        "        for linea in contenido.split('\\n'):\n",
        "            c.drawString(100, y, linea)\n",
        "            y -= 15  # Ajustar el espaciado entre líneas\n",
        "        c.save()\n",
        "        messagebox.showinfo(\"Guardado\", \"El archivo se ha guardado como Autoevaluacion.pdf\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "app = AutoevaluacionMC(preguntas)\n",
        "app.mainloop()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1nN9TSMXFoOg2Q0ziT5zxAgpzpRWSJfX3",
      "authorship_tag": "ABX9TyPZ7stkIFN2kgPfWhfhtHFu",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}